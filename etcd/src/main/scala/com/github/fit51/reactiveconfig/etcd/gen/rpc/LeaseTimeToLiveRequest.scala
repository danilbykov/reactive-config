// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** @param iD
  *   ID is the lease ID for the lease.
  * @param keys
  *   keys is true to query all the keys attached to this lease.
  */
@SerialVersionUID(0L)
final case class LeaseTimeToLiveRequest(
    iD: _root_.scala.Long = 0L,
    keys: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LeaseTimeToLiveRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = iD
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = keys
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = iD
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = keys
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withID(__v: _root_.scala.Long): LeaseTimeToLiveRequest = copy(iD = __v)
    def withKeys(__v: _root_.scala.Boolean): LeaseTimeToLiveRequest = copy(keys = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = iD
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = keys
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(iD)
        case 2 => _root_.scalapb.descriptors.PBoolean(keys)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest
    // @@protoc_insertion_point(GeneratedMessage[etcdserverpb.LeaseTimeToLiveRequest])
}

object LeaseTimeToLiveRequest extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest = {
    var __iD: _root_.scala.Long = 0L
    var __keys: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __iD = _input__.readInt64()
        case 16 =>
          __keys = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest(
        iD = __iD,
        keys = __keys,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest(
        iD = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        keys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes().get(28)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(28)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest(
    iD = 0L,
    keys = false
  )
  implicit class LeaseTimeToLiveRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest](_l) {
    def iD: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.iD)((c_, f_) => c_.copy(iD = f_))
    def keys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val KEYS_FIELD_NUMBER = 2
  def of(
    iD: _root_.scala.Long,
    keys: _root_.scala.Boolean
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveRequest(
    iD,
    keys
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[etcdserverpb.LeaseTimeToLiveRequest])
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.auth

/** Permission is a single entity
  */
@SerialVersionUID(0L)
final case class Permission(
    permType: com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ,
    key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    rangeEnd: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends scalapb.GeneratedMessage with scalapb.Message[Permission] with scalapb.lenses.Updatable[Permission] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = permType
        if (__value != com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      
      {
        val __value = key
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      
      {
        val __value = rangeEnd
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = permType
        if (__v != com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ) {
          _output__.writeEnum(1, __v.value)
        }
      };
      {
        val __v = key
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = rangeEnd
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.auth.Permission = {
      var __permType = this.permType
      var __key = this.key
      var __rangeEnd = this.rangeEnd
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __permType = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.fromValue(_input__.readEnum())
          case 18 =>
            __key = _input__.readBytes()
          case 26 =>
            __rangeEnd = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.fit51.reactiveconfig.etcd.gen.auth.Permission(
          permType = __permType,
          key = __key,
          rangeEnd = __rangeEnd
      )
    }
    def withPermType(__v: com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type): Permission = copy(permType = __v)
    def withKey(__v: _root_.com.google.protobuf.ByteString): Permission = copy(key = __v)
    def withRangeEnd(__v: _root_.com.google.protobuf.ByteString): Permission = copy(rangeEnd = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = permType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = key
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = rangeEnd
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(permType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PByteString(key)
        case 3 => _root_.scalapb.descriptors.PByteString(rangeEnd)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission
}

object Permission extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.auth.Permission] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.auth.Permission] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.fit51.reactiveconfig.etcd.gen.auth.Permission = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.fit51.reactiveconfig.etcd.gen.auth.Permission(
      com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.auth.Permission] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.auth.Permission(
        com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type
    }
  }
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission(
    permType = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type.READ,
    key = _root_.com.google.protobuf.ByteString.EMPTY,
    rangeEnd = _root_.com.google.protobuf.ByteString.EMPTY
  )
  sealed trait Type extends _root_.scalapb.GeneratedEnum {
    type EnumType = Type
    def isRead: _root_.scala.Boolean = false
    def isWrite: _root_.scala.Boolean = false
    def isReadwrite: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Type] = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type
  }
  
  object Type extends _root_.scalapb.GeneratedEnumCompanion[Type] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Type] = this
    @SerialVersionUID(0L)
    case object READ extends Type {
      val value = 0
      val index = 0
      val name = "READ"
      override def isRead: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WRITE extends Type {
      val value = 1
      val index = 1
      val name = "WRITE"
      override def isWrite: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object READWRITE extends Type {
      val value = 2
      val index = 2
      val name = "READWRITE"
      override def isReadwrite: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Type with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(READ, WRITE, READWRITE)
    def fromValue(value: _root_.scala.Int): Type = value match {
      case 0 => READ
      case 1 => WRITE
      case 2 => READWRITE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.scalaDescriptor.enums(0)
  }
  implicit class PermissionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.auth.Permission]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.auth.Permission](_l) {
    def permType: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type] = field(_.permType)((c_, f_) => c_.copy(permType = f_))
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def rangeEnd: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.rangeEnd)((c_, f_) => c_.copy(rangeEnd = f_))
  }
  final val PERMTYPE_FIELD_NUMBER = 1
  final val KEY_FIELD_NUMBER = 2
  final val RANGE_END_FIELD_NUMBER = 3
  def of(
    permType: com.github.fit51.reactiveconfig.etcd.gen.auth.Permission.Type,
    key: _root_.com.google.protobuf.ByteString,
    rangeEnd: _root_.com.google.protobuf.ByteString
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.auth.Permission = _root_.com.github.fit51.reactiveconfig.etcd.gen.auth.Permission(
    permType,
    key,
    rangeEnd
  )
}

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** From google paxosdb paper:
  * Our implementation hinges around a powerful primitive which we call MultiOp. All other database
  * operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
  * and consists of three components:
  * 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
  * for the absence or presence of a value, or compare with a given value. Two different tests in the guard
  * may apply to the same or different entries in the database. All tests in the guard are applied and
  * MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
  * it executes f op (see item 3 below).
  * 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
  * lookup operation, and applies to a single database entry. Two different operations in the list may apply
  * to the same or different entries in the database. These operations are executed
  * if guard evaluates to
  * true.
  * 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
  *
  * @param compare
  *   compare is a list of predicates representing a conjunction of terms.
  *   If the comparisons succeed, then the success requests will be processed in order,
  *   and the response will contain their respective responses in order.
  *   If the comparisons fail, then the failure requests will be processed in order,
  *   and the response will contain their respective responses in order.
  * @param success
  *   success is a list of requests which will be applied when compare evaluates to true.
  * @param failure
  *   failure is a list of requests which will be applied when compare evaluates to false.
  */
@SerialVersionUID(0L)
final case class TxnRequest(
    compare: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare] = _root_.scala.Seq.empty,
    success: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp] = _root_.scala.Seq.empty,
    failure: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TxnRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      compare.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      success.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      failure.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      compare.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      success.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      failure.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearCompare = copy(compare = _root_.scala.Seq.empty)
    def addCompare(__vs: com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare*): TxnRequest = addAllCompare(__vs)
    def addAllCompare(__vs: Iterable[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare]): TxnRequest = copy(compare = compare ++ __vs)
    def withCompare(__v: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare]): TxnRequest = copy(compare = __v)
    def clearSuccess = copy(success = _root_.scala.Seq.empty)
    def addSuccess(__vs: com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp*): TxnRequest = addAllSuccess(__vs)
    def addAllSuccess(__vs: Iterable[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]): TxnRequest = copy(success = success ++ __vs)
    def withSuccess(__v: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]): TxnRequest = copy(success = __v)
    def clearFailure = copy(failure = _root_.scala.Seq.empty)
    def addFailure(__vs: com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp*): TxnRequest = addAllFailure(__vs)
    def addAllFailure(__vs: Iterable[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]): TxnRequest = copy(failure = failure ++ __vs)
    def withFailure(__v: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]): TxnRequest = copy(failure = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => compare
        case 2 => success
        case 3 => failure
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(compare.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(success.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(failure.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest
    // @@protoc_insertion_point(GeneratedMessage[etcdserverpb.TxnRequest])
}

object TxnRequest extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest = {
    val __compare: _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare] = new _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare]
    val __success: _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp] = new _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]
    val __failure: _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp] = new _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __compare += _root_.scalapb.LiteParser.readMessage[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare](_input__)
        case 18 =>
          __success += _root_.scalapb.LiteParser.readMessage[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp](_input__)
        case 26 =>
          __failure += _root_.scalapb.LiteParser.readMessage[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest(
        compare = __compare.result(),
        success = __success.result(),
        failure = __failure.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest(
        compare = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare]]).getOrElse(_root_.scala.Seq.empty),
        success = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]]).getOrElse(_root_.scala.Seq.empty),
        failure = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes().get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare
      case 2 => __out = com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp
      case 3 => __out = com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest(
    compare = _root_.scala.Seq.empty,
    success = _root_.scala.Seq.empty,
    failure = _root_.scala.Seq.empty
  )
  implicit class TxnRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest](_l) {
    def compare: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare]] = field(_.compare)((c_, f_) => c_.copy(compare = f_))
    def success: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]] = field(_.success)((c_, f_) => c_.copy(success = f_))
    def failure: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]] = field(_.failure)((c_, f_) => c_.copy(failure = f_))
  }
  final val COMPARE_FIELD_NUMBER = 1
  final val SUCCESS_FIELD_NUMBER = 2
  final val FAILURE_FIELD_NUMBER = 3
  def of(
    compare: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.Compare],
    success: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp],
    failure: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.RequestOp]
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.TxnRequest(
    compare,
    success,
    failure
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[etcdserverpb.TxnRequest])
}

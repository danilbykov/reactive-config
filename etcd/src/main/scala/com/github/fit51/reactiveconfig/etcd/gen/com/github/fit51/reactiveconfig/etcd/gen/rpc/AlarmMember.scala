// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** @param memberID
  *   memberID is the ID of the member associated with the raised alarm.
  * @param alarm
  *   alarm is the type of alarm which has been raised.
  */
@SerialVersionUID(0L)
final case class AlarmMember(
    memberID: _root_.scala.Long = 0L,
    alarm: com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType = com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE
    ) extends scalapb.GeneratedMessage with scalapb.Message[AlarmMember] with scalapb.lenses.Updatable[AlarmMember] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = memberID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = alarm
        if (__value != com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = memberID
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = alarm
        if (__v != com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE) {
          _output__.writeEnum(2, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember = {
      var __memberID = this.memberID
      var __alarm = this.alarm
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __memberID = _input__.readUInt64()
          case 16 =>
            __alarm = com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember(
          memberID = __memberID,
          alarm = __alarm
      )
    }
    def withMemberID(__v: _root_.scala.Long): AlarmMember = copy(memberID = __v)
    def withAlarm(__v: com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType): AlarmMember = copy(alarm = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = memberID
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = alarm.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(memberID)
        case 2 => _root_.scalapb.descriptors.PEnum(alarm.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember
}

object AlarmMember extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
      com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.fromValue(__fieldsMap.getOrElse(__fields.get(1), com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes.get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType
    }
  }
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember(
    memberID = 0L,
    alarm = com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType.NONE
  )
  implicit class AlarmMemberLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember](_l) {
    def memberID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.memberID)((c_, f_) => c_.copy(memberID = f_))
    def alarm: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType] = field(_.alarm)((c_, f_) => c_.copy(alarm = f_))
  }
  final val MEMBERID_FIELD_NUMBER = 1
  final val ALARM_FIELD_NUMBER = 2
  def of(
    memberID: _root_.scala.Long,
    alarm: com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmType
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.AlarmMember(
    memberID,
    alarm
  )
}

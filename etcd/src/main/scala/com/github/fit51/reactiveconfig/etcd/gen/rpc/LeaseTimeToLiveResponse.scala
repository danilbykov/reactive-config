// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** @param iD
  *   ID is the lease ID from the keep alive request.
  * @param tTL
  *   TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
  * @param grantedTTL
  *   GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
  * @param keys
  *   Keys is the list of keys attached to this lease.
  */
@SerialVersionUID(0L)
final case class LeaseTimeToLiveResponse(
    header: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader] = _root_.scala.None,
    iD: _root_.scala.Long = 0L,
    tTL: _root_.scala.Long = 0L,
    grantedTTL: _root_.scala.Long = 0L,
    keys: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[LeaseTimeToLiveResponse] with scalapb.lenses.Updatable[LeaseTimeToLiveResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = iD
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = tTL
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = grantedTTL
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      keys.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, __value)
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = iD
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = tTL
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = grantedTTL
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      keys.foreach { __v =>
        val __m = __v
        _output__.writeBytes(5, __m)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse = {
      var __header = this.header
      var __iD = this.iD
      var __tTL = this.tTL
      var __grantedTTL = this.grantedTTL
      val __keys = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.com.google.protobuf.ByteString] ++= this.keys)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __header = Option(_root_.scalapb.LiteParser.readMessage(_input__, __header.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader.defaultInstance)))
          case 16 =>
            __iD = _input__.readInt64()
          case 24 =>
            __tTL = _input__.readInt64()
          case 32 =>
            __grantedTTL = _input__.readInt64()
          case 42 =>
            __keys += _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse(
          header = __header,
          iD = __iD,
          tTL = __tTL,
          grantedTTL = __grantedTTL,
          keys = __keys.result()
      )
    }
    def getHeader: com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader = header.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader.defaultInstance)
    def clearHeader: LeaseTimeToLiveResponse = copy(header = _root_.scala.None)
    def withHeader(__v: com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader): LeaseTimeToLiveResponse = copy(header = Option(__v))
    def withID(__v: _root_.scala.Long): LeaseTimeToLiveResponse = copy(iD = __v)
    def withTTL(__v: _root_.scala.Long): LeaseTimeToLiveResponse = copy(tTL = __v)
    def withGrantedTTL(__v: _root_.scala.Long): LeaseTimeToLiveResponse = copy(grantedTTL = __v)
    def clearKeys = copy(keys = _root_.scala.Seq.empty)
    def addKeys(__vs: _root_.com.google.protobuf.ByteString*): LeaseTimeToLiveResponse = addAllKeys(__vs)
    def addAllKeys(__vs: Iterable[_root_.com.google.protobuf.ByteString]): LeaseTimeToLiveResponse = copy(keys = keys ++ __vs)
    def withKeys(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): LeaseTimeToLiveResponse = copy(keys = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => header.orNull
        case 2 => {
          val __t = iD
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = tTL
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = grantedTTL
          if (__t != 0L) __t else null
        }
        case 5 => keys
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(iD)
        case 3 => _root_.scalapb.descriptors.PLong(tTL)
        case 4 => _root_.scalapb.descriptors.PLong(grantedTTL)
        case 5 => _root_.scalapb.descriptors.PRepeated(keys.iterator.map(_root_.scalapb.descriptors.PByteString).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse
}

object LeaseTimeToLiveResponse extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader]],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes.get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse(
    header = _root_.scala.None,
    iD = 0L,
    tTL = 0L,
    grantedTTL = 0L,
    keys = _root_.scala.Seq.empty
  )
  implicit class LeaseTimeToLiveResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse](_l) {
    def header: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader] = field(_.getHeader)((c_, f_) => c_.copy(header = Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def iD: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.iD)((c_, f_) => c_.copy(iD = f_))
    def tTL: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.tTL)((c_, f_) => c_.copy(tTL = f_))
    def grantedTTL: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.grantedTTL)((c_, f_) => c_.copy(grantedTTL = f_))
    def keys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val TTL_FIELD_NUMBER = 3
  final val GRANTEDTTL_FIELD_NUMBER = 4
  final val KEYS_FIELD_NUMBER = 5
  def of(
    header: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader],
    iD: _root_.scala.Long,
    tTL: _root_.scala.Long,
    grantedTTL: _root_.scala.Long,
    keys: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.LeaseTimeToLiveResponse(
    header,
    iD,
    tTL,
    grantedTTL,
    keys
  )
}

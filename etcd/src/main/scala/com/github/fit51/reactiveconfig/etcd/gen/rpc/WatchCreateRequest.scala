// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** @param key
  *   key is the key to register for watching.
  * @param rangeEnd
  *   range_end is the end of the range [key, range_end) to watch. If range_end is not given,
  *   only the key argument is watched. If range_end is equal to '&92;0', all keys greater than
  *   or equal to the key argument are watched.
  *   If the range_end is one bit larger than the given key,
  *   then all keys with the prefix (the given key) will be watched.
  * @param startRevision
  *   start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
  * @param progressNotify
  *   progress_notify is set so that the etcd server will periodically send a WatchResponse with
  *   no events to the new watcher if there are no recent events. It is useful when clients
  *   wish to recover a disconnected watcher starting from a recent known revision.
  *   The etcd server may decide how often it will send notifications based on current load.
  * @param filters
  *   filters filter the events at server side before it sends back to the watcher.
  * @param prevKv
  *   If prev_kv is set, created watcher gets the previous KV before the event happens.
  *   If the previous KV is already compacted, nothing will be returned.
  */
@SerialVersionUID(0L)
final case class WatchCreateRequest(
    key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    rangeEnd: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    startRevision: _root_.scala.Long = 0L,
    progressNotify: _root_.scala.Boolean = false,
    filters: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType] = _root_.scala.Seq.empty,
    prevKv: _root_.scala.Boolean = false
    ) extends scalapb.GeneratedMessage with scalapb.Message[WatchCreateRequest] with scalapb.lenses.Updatable[WatchCreateRequest] {
    private[this] def filtersSerializedSize = {
      if (__filtersSerializedSizeField == 0) __filtersSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        filters.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __filtersSerializedSizeField
    }
    @transient private[this] var __filtersSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      
      {
        val __value = rangeEnd
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      
      {
        val __value = startRevision
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = progressNotify
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      if(filters.nonEmpty) {
        val __localsize = filtersSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = prevKv
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = key
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(1, __v)
        }
      };
      {
        val __v = rangeEnd
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = startRevision
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = progressNotify
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      if (filters.nonEmpty) {
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(filtersSerializedSize)
        filters.foreach((_output__.writeEnumNoTag _).compose((_: com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType).value))
      };
      {
        val __v = prevKv
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest = {
      var __key = this.key
      var __rangeEnd = this.rangeEnd
      var __startRevision = this.startRevision
      var __progressNotify = this.progressNotify
      val __filters = (_root_.scala.collection.immutable.Vector.newBuilder[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType] ++= this.filters)
      var __prevKv = this.prevKv
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readBytes()
          case 18 =>
            __rangeEnd = _input__.readBytes()
          case 24 =>
            __startRevision = _input__.readInt64()
          case 32 =>
            __progressNotify = _input__.readBool()
          case 40 =>
            __filters += com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType.fromValue(_input__.readEnum())
          case 42 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __filters += com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType.fromValue(_input__.readEnum)
            }
            _input__.popLimit(oldLimit)
          }
          case 48 =>
            __prevKv = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest(
          key = __key,
          rangeEnd = __rangeEnd,
          startRevision = __startRevision,
          progressNotify = __progressNotify,
          filters = __filters.result(),
          prevKv = __prevKv
      )
    }
    def withKey(__v: _root_.com.google.protobuf.ByteString): WatchCreateRequest = copy(key = __v)
    def withRangeEnd(__v: _root_.com.google.protobuf.ByteString): WatchCreateRequest = copy(rangeEnd = __v)
    def withStartRevision(__v: _root_.scala.Long): WatchCreateRequest = copy(startRevision = __v)
    def withProgressNotify(__v: _root_.scala.Boolean): WatchCreateRequest = copy(progressNotify = __v)
    def clearFilters = copy(filters = _root_.scala.Seq.empty)
    def addFilters(__vs: com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType*): WatchCreateRequest = addAllFilters(__vs)
    def addAllFilters(__vs: Iterable[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType]): WatchCreateRequest = copy(filters = filters ++ __vs)
    def withFilters(__v: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType]): WatchCreateRequest = copy(filters = __v)
    def withPrevKv(__v: _root_.scala.Boolean): WatchCreateRequest = copy(prevKv = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => {
          val __t = rangeEnd
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = startRevision
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = progressNotify
          if (__t != false) __t else null
        }
        case 5 => filters.iterator.map(_.javaValueDescriptor).toSeq
        case 6 => {
          val __t = prevKv
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(key)
        case 2 => _root_.scalapb.descriptors.PByteString(rangeEnd)
        case 3 => _root_.scalapb.descriptors.PLong(startRevision)
        case 4 => _root_.scalapb.descriptors.PBoolean(progressNotify)
        case 5 => _root_.scalapb.descriptors.PRepeated(filters.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
        case 6 => _root_.scalapb.descriptors.PBoolean(prevKv)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest
}

object WatchCreateRequest extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest(
      __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.Seq[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].iterator.map(__e => com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType.fromValue(__e.getNumber)).toSeq,
      __fieldsMap.getOrElse(__fields.get(5), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType.fromValue(__e.number)).toSeq,
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType
    }
  }
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest(
    key = _root_.com.google.protobuf.ByteString.EMPTY,
    rangeEnd = _root_.com.google.protobuf.ByteString.EMPTY,
    startRevision = 0L,
    progressNotify = false,
    filters = _root_.scala.Seq.empty,
    prevKv = false
  )
  sealed trait FilterType extends _root_.scalapb.GeneratedEnum {
    type EnumType = FilterType
    def isNoput: _root_.scala.Boolean = false
    def isNodelete: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[FilterType] = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType
  }
  
  object FilterType extends _root_.scalapb.GeneratedEnumCompanion[FilterType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[FilterType] = this
    /** filter out put event.
      */
    @SerialVersionUID(0L)
    case object NOPUT extends FilterType {
      val value = 0
      val index = 0
      val name = "NOPUT"
      override def isNoput: _root_.scala.Boolean = true
    }
    
    /** filter out delete event.
      */
    @SerialVersionUID(0L)
    case object NODELETE extends FilterType {
      val value = 1
      val index = 1
      val name = "NODELETE"
      override def isNodelete: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends FilterType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(NOPUT, NODELETE)
    def fromValue(value: _root_.scala.Int): FilterType = value match {
      case 0 => NOPUT
      case 1 => NODELETE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.scalaDescriptor.enums(0)
  }
  implicit class WatchCreateRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def rangeEnd: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.rangeEnd)((c_, f_) => c_.copy(rangeEnd = f_))
    def startRevision: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.startRevision)((c_, f_) => c_.copy(startRevision = f_))
    def progressNotify: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.progressNotify)((c_, f_) => c_.copy(progressNotify = f_))
    def filters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType]] = field(_.filters)((c_, f_) => c_.copy(filters = f_))
    def prevKv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.prevKv)((c_, f_) => c_.copy(prevKv = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val RANGE_END_FIELD_NUMBER = 2
  final val START_REVISION_FIELD_NUMBER = 3
  final val PROGRESS_NOTIFY_FIELD_NUMBER = 4
  final val FILTERS_FIELD_NUMBER = 5
  final val PREV_KV_FIELD_NUMBER = 6
  def of(
    key: _root_.com.google.protobuf.ByteString,
    rangeEnd: _root_.com.google.protobuf.ByteString,
    startRevision: _root_.scala.Long,
    progressNotify: _root_.scala.Boolean,
    filters: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest.FilterType],
    prevKv: _root_.scala.Boolean
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchCreateRequest(
    key,
    rangeEnd,
    startRevision,
    progressNotify,
    filters,
    prevKv
  )
}

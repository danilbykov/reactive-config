// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.kv

/** @param type
  *   type is the kind of event. If type is a PUT, it indicates
  *   new data has been stored to the key. If type is a DELETE,
  *   it indicates the key was deleted.
  * @param kv
  *   kv holds the KeyValue for the event.
  *   A PUT event contains current kv pair.
  *   A PUT event with kv.Version=1 indicates the creation of a key.
  *   A DELETE/EXPIRE event contains the deleted key with
  *   its modification revision set to the revision of deletion.
  * @param prevKv
  *   prev_kv holds the key-value pair before the event happens.
  */
@SerialVersionUID(0L)
final case class Event(
    `type`: com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT,
    kv: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue] = _root_.scala.None,
    prevKv: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Event] with scalapb.lenses.Updatable[Event] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`
        if (__value != com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      if (kv.isDefined) {
        val __value = kv.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (prevKv.isDefined) {
        val __value = prevKv.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = `type`
        if (__v != com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT) {
          _output__.writeEnum(1, __v.value)
        }
      };
      kv.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      prevKv.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.kv.Event = {
      var __type = this.`type`
      var __kv = this.kv
      var __prevKv = this.prevKv
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.fromValue(_input__.readEnum())
          case 18 =>
            __kv = Option(_root_.scalapb.LiteParser.readMessage(_input__, __kv.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue.defaultInstance)))
          case 26 =>
            __prevKv = Option(_root_.scalapb.LiteParser.readMessage(_input__, __prevKv.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.github.fit51.reactiveconfig.etcd.gen.kv.Event(
          `type` = __type,
          kv = __kv,
          prevKv = __prevKv
      )
    }
    def withType(__v: com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType): Event = copy(`type` = __v)
    def getKv: com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue = kv.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue.defaultInstance)
    def clearKv: Event = copy(kv = _root_.scala.None)
    def withKv(__v: com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue): Event = copy(kv = Option(__v))
    def getPrevKv: com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue = prevKv.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue.defaultInstance)
    def clearPrevKv: Event = copy(prevKv = _root_.scala.None)
    def withPrevKv(__v: com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue): Event = copy(prevKv = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => kv.orNull
        case 3 => prevKv.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 2 => kv.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => prevKv.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.kv.Event
}

object Event extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.kv.Event] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.kv.Event] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.fit51.reactiveconfig.etcd.gen.kv.Event = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.fit51.reactiveconfig.etcd.gen.kv.Event(
      com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.kv.Event] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.kv.Event(
        com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = KvProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = KvProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue
      case 3 => __out = com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType
    }
  }
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.kv.Event(
    `type` = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType.PUT,
    kv = _root_.scala.None,
    prevKv = _root_.scala.None
  )
  sealed trait EventType extends _root_.scalapb.GeneratedEnum {
    type EnumType = EventType
    def isPut: _root_.scala.Boolean = false
    def isDelete: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[EventType] = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType
  }
  
  object EventType extends _root_.scalapb.GeneratedEnumCompanion[EventType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[EventType] = this
    @SerialVersionUID(0L)
    case object PUT extends EventType {
      val value = 0
      val index = 0
      val name = "PUT"
      override def isPut: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DELETE extends EventType {
      val value = 1
      val index = 1
      val name = "DELETE"
      override def isDelete: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends EventType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(PUT, DELETE)
    def fromValue(value: _root_.scala.Int): EventType = value match {
      case 0 => PUT
      case 1 => DELETE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.github.fit51.reactiveconfig.etcd.gen.kv.Event.scalaDescriptor.enums(0)
  }
  implicit class EventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.kv.Event]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.kv.Event](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def kv: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue] = field(_.getKv)((c_, f_) => c_.copy(kv = Option(f_)))
    def optionalKv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]] = field(_.kv)((c_, f_) => c_.copy(kv = f_))
    def prevKv: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue] = field(_.getPrevKv)((c_, f_) => c_.copy(prevKv = Option(f_)))
    def optionalPrevKv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]] = field(_.prevKv)((c_, f_) => c_.copy(prevKv = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val KV_FIELD_NUMBER = 2
  final val PREV_KV_FIELD_NUMBER = 3
  def of(
    `type`: com.github.fit51.reactiveconfig.etcd.gen.kv.Event.EventType,
    kv: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue],
    prevKv: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.kv.KeyValue]
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.kv.Event = _root_.com.github.fit51.reactiveconfig.etcd.gen.kv.Event(
    `type`,
    kv,
    prevKv
  )
}

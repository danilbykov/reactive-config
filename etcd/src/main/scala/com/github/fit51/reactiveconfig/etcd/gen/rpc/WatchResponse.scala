// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.fit51.reactiveconfig.etcd.gen.rpc

/** @param watchId
  *   watch_id is the ID of the watcher that corresponds to the response.
  * @param created
  *   created is set to true if the response is for a create watch request.
  *   The client should record the watch_id and expect to receive events for
  *   the created watcher from the same stream.
  *   All events sent to the created watcher will attach with the same watch_id.
  * @param canceled
  *   canceled is set to true if the response is for a cancel watch request.
  *   No further events will be sent to the canceled watcher.
  * @param compactRevision
  *   compact_revision is set to the minimum index if a watcher tries to watch
  *   at a compacted index.
  *  
  *   This happens when creating a watcher at a compacted revision or the watcher cannot
  *   catch up with the progress of the key-value store.
  *  
  *   The client should treat the watcher as canceled and should not try to create any
  *   watcher with the same start_revision again.
  * @param cancelReason
  *   cancel_reason indicates the reason for canceling the watcher.
  */
@SerialVersionUID(0L)
final case class WatchResponse(
    header: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader] = _root_.scala.None,
    watchId: _root_.scala.Long = 0L,
    created: _root_.scala.Boolean = false,
    canceled: _root_.scala.Boolean = false,
    compactRevision: _root_.scala.Long = 0L,
    cancelReason: _root_.scala.Predef.String = "",
    events: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.kv.Event] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[WatchResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = watchId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = created
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = canceled
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = compactRevision
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = cancelReason
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      events.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = watchId
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = created
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = canceled
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = compactRevision
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = cancelReason
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      events.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getHeader: com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader = header.getOrElse(com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader.defaultInstance)
    def clearHeader: WatchResponse = copy(header = _root_.scala.None)
    def withHeader(__v: com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader): WatchResponse = copy(header = Option(__v))
    def withWatchId(__v: _root_.scala.Long): WatchResponse = copy(watchId = __v)
    def withCreated(__v: _root_.scala.Boolean): WatchResponse = copy(created = __v)
    def withCanceled(__v: _root_.scala.Boolean): WatchResponse = copy(canceled = __v)
    def withCompactRevision(__v: _root_.scala.Long): WatchResponse = copy(compactRevision = __v)
    def withCancelReason(__v: _root_.scala.Predef.String): WatchResponse = copy(cancelReason = __v)
    def clearEvents = copy(events = _root_.scala.Seq.empty)
    def addEvents(__vs: com.github.fit51.reactiveconfig.etcd.gen.kv.Event*): WatchResponse = addAllEvents(__vs)
    def addAllEvents(__vs: Iterable[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]): WatchResponse = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]): WatchResponse = copy(events = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => header.orNull
        case 2 => {
          val __t = watchId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = created
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = canceled
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = compactRevision
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = cancelReason
          if (__t != "") __t else null
        }
        case 11 => events
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(watchId)
        case 3 => _root_.scalapb.descriptors.PBoolean(created)
        case 4 => _root_.scalapb.descriptors.PBoolean(canceled)
        case 5 => _root_.scalapb.descriptors.PLong(compactRevision)
        case 6 => _root_.scalapb.descriptors.PString(cancelReason)
        case 11 => _root_.scalapb.descriptors.PRepeated(events.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse
    // @@protoc_insertion_point(GeneratedMessage[etcdserverpb.WatchResponse])
}

object WatchResponse extends scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse = {
    var __header: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader] = _root_.scala.None
    var __watchId: _root_.scala.Long = 0L
    var __created: _root_.scala.Boolean = false
    var __canceled: _root_.scala.Boolean = false
    var __compactRevision: _root_.scala.Long = 0L
    var __cancelReason: _root_.scala.Predef.String = ""
    val __events: _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.kv.Event] = new _root_.scala.collection.immutable.VectorBuilder[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __header = Option(__header.fold(_root_.scalapb.LiteParser.readMessage[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __watchId = _input__.readInt64()
        case 24 =>
          __created = _input__.readBool()
        case 32 =>
          __canceled = _input__.readBool()
        case 40 =>
          __compactRevision = _input__.readInt64()
        case 50 =>
          __cancelReason = _input__.readStringRequireUtf8()
        case 90 =>
          __events += _root_.scalapb.LiteParser.readMessage[com.github.fit51.reactiveconfig.etcd.gen.kv.Event](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse(
        header = __header,
        watchId = __watchId,
        created = __created,
        canceled = __canceled,
        compactRevision = __compactRevision,
        cancelReason = __cancelReason,
        events = __events.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse(
        header = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader]]),
        watchId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        created = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        canceled = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        compactRevision = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        cancelReason = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        events = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RpcProto.javaDescriptor.getMessageTypes().get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RpcProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader
      case 11 => __out = com.github.fit51.reactiveconfig.etcd.gen.kv.Event
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse(
    header = _root_.scala.None,
    watchId = 0L,
    created = false,
    canceled = false,
    compactRevision = 0L,
    cancelReason = "",
    events = _root_.scala.Seq.empty
  )
  implicit class WatchResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse](_l) {
    def header: _root_.scalapb.lenses.Lens[UpperPB, com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader] = field(_.getHeader)((c_, f_) => c_.copy(header = Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def watchId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.watchId)((c_, f_) => c_.copy(watchId = f_))
    def created: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.created)((c_, f_) => c_.copy(created = f_))
    def canceled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.canceled)((c_, f_) => c_.copy(canceled = f_))
    def compactRevision: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.compactRevision)((c_, f_) => c_.copy(compactRevision = f_))
    def cancelReason: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.cancelReason)((c_, f_) => c_.copy(cancelReason = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]] = field(_.events)((c_, f_) => c_.copy(events = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val WATCH_ID_FIELD_NUMBER = 2
  final val CREATED_FIELD_NUMBER = 3
  final val CANCELED_FIELD_NUMBER = 4
  final val COMPACT_REVISION_FIELD_NUMBER = 5
  final val CANCEL_REASON_FIELD_NUMBER = 6
  final val EVENTS_FIELD_NUMBER = 11
  def of(
    header: _root_.scala.Option[com.github.fit51.reactiveconfig.etcd.gen.rpc.ResponseHeader],
    watchId: _root_.scala.Long,
    created: _root_.scala.Boolean,
    canceled: _root_.scala.Boolean,
    compactRevision: _root_.scala.Long,
    cancelReason: _root_.scala.Predef.String,
    events: _root_.scala.Seq[com.github.fit51.reactiveconfig.etcd.gen.kv.Event]
  ): _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse = _root_.com.github.fit51.reactiveconfig.etcd.gen.rpc.WatchResponse(
    header,
    watchId,
    created,
    canceled,
    compactRevision,
    cancelReason,
    events
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[etcdserverpb.WatchResponse])
}
